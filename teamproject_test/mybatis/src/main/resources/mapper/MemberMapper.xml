<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- insert, delete, update, select 맞춰서 쓰지 않으면? 어떤 오류가 생길지 모른다! 맞춰서 쓰자 -->
<mapper namespace="ksmart.mybatis.mapper.MemberMapper">
	<!-- id 태그 => pk / result 태그 => 컬럼 -->
	<resultMap type="Member" id="memberResultMap">
		<id 	column="m_id" 		property="memberId"/>
		<result column="m_pw" 		property="memberPw"/>
		<result column="m_name"	 	property="memberName"/>
		<result column="m_level" 	property="memberLevel"/>
		<result column="m_email" 	property="memberEmail"/>
		<result column="m_addr" 	property="memberAddr"/>
		<result column="m_reg_date" property="memberRegDate"/>
		<association property="levelInfo" javaType="MemberLevel">
			<id column="level_num" 			property="levelNum"/>
			<result column="level_name"		property="levelName"/>
			<result column="level_reg_date"	property="levelRegDate"/>
		</association>
		<collection property="goodsList" ofType="Goods">
			<id column="g_code"				property="goodsCode"/>
			<result column="g_name"			property="goodsName"/>
			<result column="g_price"		property="goodsPrice"/>
			<result column="g_seller_id"	property="goodsSellerId"/>
			<result column="g_reg_date"		property="goodsRegDate"/>
		</collection>
	</resultMap>
	
	<!-- startRow/ rowPer 데이터 넘길 때 숫자형으로 넘김 -->
	<select id="getLoginHistory" parameterType="map" resultType="map">
		SELECT
			 l.login_num AS loginNum
			,l.login_id AS loginId
			,l.login_date AS loginDate
			,l.logout_date AS logoutDate
		FROM
			tb_login AS l
		LIMIT #{startRow}, #{rowPerPage};
	</select>
	
	<select id="getLoginHistoryCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			tb_login AS l
	</select>
	
	<select id="getSellerInfoList" fetchSize="100" resultMap="memberResultMap">
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
			,g.g_code
			,g.g_name
			,g.g_price
			,g.g_seller_id
			,g.g_reg_date
		FROM
			tb_member AS m
			left join
			tb_goods AS g
			on
			m.m_id = g.g_seller_id
		WHERE
			m.m_level = 2
		ORDER BY m.m_id, g.g_code;
	</select>
	
	<select id="getMemberInfoList" fetchSize="100" resultMap="memberResultMap">
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
			,l.level_num
			,l.level_name
			,l.level_reg_date
		FROM
			tb_member AS m
			INNER join
			tb_member_level AS l
			on
			m.m_level = l.level_num
		ORDER BY m.m_id;
	</select>
	
	<!-- fetchSize : 몇개씩 가져올 건지 -->
	<select id="getSearchMemberList" fetchSize="1000" parameterType="String" resultMap="memberResultMap">
		/* 검색결과로 조회 */
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
		FROM
			tb_member AS m
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="searchValue != null and searchValue != ''">
				${searchKey} LiKE CONCAT('%', #{searchValue}, '%');
			</if>
		</trim>
	</select>
	
	<delete id="removeOrderByGCode" parameterType="String">
		/* tb_order (상품코드에 연관된 주문 내역 삭제) join - 판매자 */
		DELETE
			o
		FROM
			tb_goods AS g
			INNER join
			tb_order AS o
			on
			g.g_code = o.o_g_code
		WHERE
			g.g_seller_id = #{memberId};
	</delete>
	
	<delete id="removeGoodsById" parameterType="String">
		/* tb_goods(판매자가 등록한 상품 목록 삭제) - 판매자 */
		DELETE
		FROM
			tb_goods
		WHERE
			g_seller_id = #{memberId};
	</delete>
	
	<delete id="removeOrderById" parameterType="String">
		/* tb_order(구매자가 구매한 주문내역 삭제) - 구매자 */
		DELETE
		FROM
			tb_order AS o
		WHERE
			o_id = #{memberId};
	</delete>
	
	<delete id="removeLoginHistoryById" parameterType="String">
		/* tb_login(회원이 로그인한 이력 삭제) - 회원 */
		DELETE
		FROM
			tb_login
		WHERE
			login_id = #{memberId};
	</delete>
	
	<delete id="removeMemberById" parameterType="String">
		/* tb_member(회원 탈퇴) - 회원 */
		DELETE
		FROM
			tb_member
		WHERE
			m_id = #{memberId};
	</delete>
	
	<!-- suffixOverrides="," 맨 마지막이 , 라면 치워라 -->
	<!-- prefix="SET" : SET을 앞에 위치 시켜라 prefixOverrides="," : 맨 앞이 , 라면 치워라 <if test=""> : test 안에서는 {} 없이 바인딩 된다-->
	<update id="modifyMember" parameterType="Member">
		/* 회원 수정 */
		UPDATE tb_member
		<trim prefix="SET" prefixOverrides=",">
			<if test="memberPw != null and memberPw != ''">
				m_pw		= #{memberPw}
			</if>
			<if test="memberName != null and memberName != ''">
				,m_name		= #{memberName}
			</if>
			<if test="memberLevel != null and memberLevel != ''">
				,m_level	= #{memberLevel}
			</if>
			<if test="memberEmail != null and memberEmail != ''">
				,m_email	= #{memberEmail}
			</if>
			<if test="memberAddr != null and memberAddr != ''">
				,m_addr		= #{memberAddr}
			</if>
		</trim>
		WHERE
			m_id = #{memberId};
	</update>
	
	<!-- resultMap 태그 아이디 값을 찾아서 알아서 프로퍼티명으로 변경해줌 -->
	<select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
		/* 아이디로 회원 정보 조회 */
		SELECT
			 m.m_id
			,m.m_pw
			,m.m_name
			,m.m_level
			,m.m_email
			,m.m_addr
			,m.m_reg_date
		FROM
			tb_member AS m
		WHERE
			m.m_id = #{memberId};
	</select>
	
	<!-- insert, delete, update, select 태그 내부는 sql문 들어가는 것, 주석도 sql 맞춰서 작성해야지 -->
	<insert id="addMember" parameterType="Member">
		/* 회원 가입 */
		/* mybatis 에서는 #으로 값 바인딩 */
		INSERT INTO tb_member
		(	 m_id
			,m_pw
			,m_name
			,m_level
			,m_email
			,m_addr
			,m_reg_date
		)VALUES(
			 #{memberId}
			,#{memberPw}
			,#{memberName}
			,#{memberLevel}
			,#{memberEmail}
			,#{memberAddr}
			,CURDATE()
		);
	</insert>
	
	<select id="getMemberList" resultType="Member">
		/* 회원 목록 조회 */
		SELECT
			m.m_id 			AS memberId,
			m.m_pw 			AS memberPw,
			m.m_name 		AS memberName,
			m.m_level 		AS memberLevel,
			m.m_email 		AS memberEmail,
			m.m_addr 		AS memberAddr,
			m.m_reg_date	AS memberRegDate
		FROM
			tb_member AS m;
	</select>
	
	<select id="getMemberLevelList" resultType="MemberLevel">
		/*회원 등급 목록 조회*/
		SELECT
			l.level_num			AS levelNum,
			l.level_name 		AS levelName,
			l.level_reg_date	AS levelRegDate
		FROM
			tb_member_level AS l;
	</select>
</mapper>